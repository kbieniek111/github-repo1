Dany jest plik CSV zawierający statystykę zgonów w Polsce w 2019 roku z podziałem na grupy wiekowe i przyczyny. Przyczyny są zapisane w pierwszej kolumnie z użyciem kodu ICD-10. Druga kolumna zawiera sumaryczną liczbę zgonów z podanej przyczyny, a kolejne kolumny - liczby zgonów w przedziałach wiekowych opisanych w nagłówku.


Zadanie 1.

Napisz klasę DeathCauseStatistic, posiadającą jako prywatne pola kod ICD-10 choroby oraz tablicę liczb zgonów w kolejnych grupach wiekowych.


Napisz publiczną, statyczną metodę fromCsvLine zwracającą obiekt DeathCauseStatistic na podstawie pojedynczej linii pliku CSV. Uwzględnij, że w pliku po nazwie kodu znajduje się tabulator.


Napisz akcesor do kodu ICD-10 przyczyny zgonu.


Zadanie 2. 

Wewnątrz klasy DeathCauseStatistic zdefiniuj publiczną klasę AgeBracketDeaths posiadającą publiczne, ostateczne pola typu int: young, old, deathCount zawierające granice grupy wiekowej i liczbę zgonów.


W klasie DeathCauseStatistic napisz metodę przyjmującą wiek i zwracającą obiekt AgeBracketDeaths odpowiadający temu wiekowi.



Zadanie 3.

Napisz klasę DeathCauseStatisticList, wewnątrz której, w wybranej strukturze danych przetrzymywana będzie informacja o wszystkich obiektach DeathCauseStatistic. Napisz metodę repopulate, przyjmującą ścieżkę do pliku, która usuwa istniejące dane z tej struktury i zapełnia ją danymi z pliku CSV.



W klasie DeathCauseStatisticsList napisz metodę mostDeadlyDiseases, która przyjmie wiek oraz liczbę n, mniejszą od liczby wymienionych chorób. Metoda powinna zwrócić n-elementową listę referencji na obiekty DeathCauseStatistic odpowiadające chorobom powodującym największą liczbę zgonów w grupie wiekowej do której przynależy podany wiek. Lista powinna być posortowana malejąco.



Kody ICD-10 zawsze rozpoczynają się od pojedynczej litery oraz dwóch cyfr. Podczas sprawdzania poprawności kodu należy ograniczyć się do tego warunku.



Dany jest plik tekstowy zawierający opis kodów listy chorób. Właściwe dane znajdują się w nim od linii 88. Większość linii ma postać:

KOD OPIS

np.

J12.81 Pneumonia due to SARS-associated coronavirus


jednak niektóre zawierają dodatkowe informacje lub są kontynuacją opisów nie mieszczących się w pojedynczej linii i powinny zostać pominięte.


Zadanie 4.

Napisz interfejs ICDCodeTabular posiadający jedną, publiczną metodę getDescription, która dla podanego kodu choroby zwróci jej opis, lub gdy takiego kodu nie odnajdzie rzuci wyjątek IndexOutOfBoundsException. Zaimplementuj ten interfejs w dwóch klasach ICDCodeTabularOptimizedForTime oraz ICDCodeTabularOptimizedForMemory.


Klasa ICDCodeTabularOptimizedForTime powinna jednorazowo załadować wszystkie kody i opisy z pliku, a jej metoda getDescription powinna zwracać wartości z wybranej struktury danych w pamięci tymczasowej.


Klasa ICDCodeTabularOptimizedForMemory nie powinna przetrzymywać danych w pamięci operacyjnej, ale za każdym wywołaniem metody getDescription powinna otwierać plik i wyszukiwać w nim opisu.

 ZADANIE 1 i 2 – Klasa DeathCauseStatistic z fromCsvLine i AgeBracketDeaths
java
Kopiuj
Edytuj
import java.util.*;

public class DeathCauseStatistic {
    private final String icd10Code;
    private final int[] deathsPerAgeGroup;

    public DeathCauseStatistic(String icd10Code, int[] deathsPerAgeGroup) {
        this.icd10Code = icd10Code;
        this.deathsPerAgeGroup = deathsPerAgeGroup;
    }

    public static DeathCauseStatistic fromCsvLine(String csvLine) {
        String[] parts = csvLine.split(",");

        String code = parts[0].trim();
        if (!code.matches("[A-Z]\\d{2}.*")) {
            throw new IllegalArgumentException("Invalid ICD-10 code: " + code);
        }

        int[] deaths = new int[parts.length - 2]; // Pomijamy kolumny: Kod i Razem
        for (int i = 2; i < parts.length; i++) {
            String val = parts[i].trim();
            deaths[i - 2] = (val.equals("-") || val.isEmpty()) ? 0 : Integer.parseInt(val);
        }

        return new DeathCauseStatistic(code, deaths);
    }

    public String getIcd10Code() {
        return icd10Code;
    }

    public static class AgeBracketDeaths {
        public final int young;
        public final int old;
        public final int deathCount;

        public AgeBracketDeaths(int young, int old, int deathCount) {
            this.young = young;
            this.old = old;
            this.deathCount = deathCount;
        }
    }

    public AgeBracketDeaths getDeathsForAge(int age) {
        int[] brackets = {
            0, 5, 10, 15, 20, 25, 30, 35, 40, 45,
            50, 55, 60, 65, 70, 75, 80, 85, 90, 95
        };

        for (int i = 0; i < brackets.length; i++) {
            int lower = brackets[i];
            int upper = (i == brackets.length - 1) ? 130 : brackets[i + 1] - 1;

            if (age >= lower && age <= upper) {
                return new AgeBracketDeaths(lower, upper, i < deathsPerAgeGroup.length ? deathsPerAgeGroup[i] : 0);
            }
        }
        return new AgeBracketDeaths(0, 0, 0);
    }
}
✅ ZADANIE 3 – Klasa DeathCauseStatisticList
java
Kopiuj
Edytuj
import java.io.*;
import java.util.*;
import java.util.stream.*;

public class DeathCauseStatisticList {
    private final List<DeathCauseStatistic> statistics = new ArrayList<>();

    public void repopulate(String filePath) throws IOException {
        statistics.clear();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean firstLine = true;

            while ((line = reader.readLine()) != null) {
                if (firstLine) {
                    firstLine = false; // Pomijamy nagłówek
                    continue;
                }

                line = line.trim();
                if (line.isEmpty() || !Character.isLetter(line.charAt(0))) {
                    continue; // Pomijamy linie ogólne lub puste
                }

                try {
                    DeathCauseStatistic stat = DeathCauseStatistic.fromCsvLine(line);
                    statistics.add(stat);
                } catch (IllegalArgumentException ignored) {
                    // Pomiń linie z błędnym formatem
                }
            }
        }
    }

    public List<DeathCauseStatistic> mostDeadlyDiseases(int age, int n) {
        return statistics.stream()
                .map(stat -> new AbstractMap.SimpleEntry<>(stat, stat.getDeathsForAge(age).deathCount))
                .sorted((a, b) -> Integer.compare(b.getValue(), a.getValue()))
                .limit(n)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
    }
}
✅ ZADANIE 4 – Interfejs ICDCodeTabular i dwie implementacje
Interfejs:
java
Kopiuj
Edytuj
public interface ICDCodeTabular {
    String getDescription(String code) throws IndexOutOfBoundsException;
}
ICDCodeTabularOptimizedForTime
java
Kopiuj
Edytuj
import java.io.*;
import java.util.*;

public class ICDCodeTabularOptimizedForTime implements ICDCodeTabular {
    private final Map<String, String> codeDescriptions = new HashMap<>();

    public ICDCodeTabularOptimizedForTime(String filePath) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            int lineNum = 0;
            String line;
            while ((line = reader.readLine()) != null) {
                lineNum++;
                if (lineNum < 88) continue;

                if (line.matches("^[A-Z]\\d{2}(\\.\\d+)?\\s+.*")) {
                    String[] parts = line.trim().split("\\s+", 2);
                    if (parts.length == 2) {
                        codeDescriptions.put(parts[0], parts[1]);
                    }
                }
            }
        }
    }

    @Override
    public String getDescription(String code) {
        String desc = codeDescriptions.get(code);
        if (desc == null) throw new IndexOutOfBoundsException("Code not found: " + code);
        return desc;
    }
}
ICDCodeTabularOptimizedForMemory
java
Kopiuj
Edytuj
import java.io.*;

public class ICDCodeTabularOptimizedForMemory implements ICDCodeTabular {
    private final String filePath;

    public ICDCodeTabularOptimizedForMemory(String filePath) {
        this.filePath = filePath;
    }

    @Override
    public String getDescription(String code) throws IndexOutOfBoundsException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int lineNum = 0;

            while ((line = reader.readLine()) != null) {
                lineNum++;
                if (lineNum < 88) continue;

                if (line.startsWith(code + " ")) {
                    return line.substring(code.length()).trim();
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        throw new IndexOutOfBoundsException("Code not found: " + code);
    }
}
✅ (Opcjonalnie) Przykład użycia
java
Kopiuj
Edytuj
public class Main {
    public static void main(String[] args) throws IOException {
        DeathCauseStatisticList list = new DeathCauseStatisticList();
        list.repopulate("zgony.csv");

        int age = 72;
        int topN = 5;

        List<DeathCauseStatistic> top = list.mostDeadlyDiseases(age, topN);
        for (DeathCauseStatistic stat : top) {
            System.out.println(stat.getIcd10Code());
        }

        ICDCodeTabular tabular = new ICDCodeTabularOptimizedForTime("kody.txt");
        System.out.println(tabular.getDescription("A04.7"));
    }
}
